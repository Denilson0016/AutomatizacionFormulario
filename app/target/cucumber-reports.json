[
  {
    "line": 1,
    "elements": [
      {
        "line": 4,
        "name": "Go to webSite",
        "description": "",
        "id": "test-form-functionality;go-to-website",
        "after": [
          {
            "result": {
              "duration": 758700,
              "status": "passed"
            },
            "match": {
              "location": "Hooks.tearDown(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2598492300,
              "status": "passed"
            },
            "line": 5,
            "name": "entry to the page",
            "match": {
              "location": "BackgroundSteps.navigateToPage()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 246003800,
              "status": "passed"
            },
            "line": 6,
            "name": "ignore security restriction",
            "match": {
              "location": "BackgroundSteps.ignoreSecurityRestriction()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1743404400,
              "status": "passed"
            },
            "line": 7,
            "name": "can i go to the form page",
            "match": {
              "location": "BackgroundSteps.canIGoToTheFormPage()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 9,
        "name": "As a user, I want the titles of the fields corresponding to Neighborhood and Message to be well written.",
        "description": "",
        "id": "test-form-functionality;as-a-user--i-want-the-titles-of-the-fields-corresponding-to-neighborhood-and-message-to-be-well-written.",
        "after": [
          {
            "output": [
              "Scenario fallido, ver imagen adjunta."
            ],
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "result": {
              "error_message": "cucumber.runtime.CucumberException: java.io.IOException: Failed to create directory C:\\Users\\Jaiver%20Mauricio%20M\\Documents\\SOFTESTING\\SeleniumAutomatizacion\\app\\test-output\r\n\tat com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter.createReportFileOutputStream(ExtentCucumberAdapter.java:248)\r\n\tat com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter.writeBytesToURL(ExtentCucumberAdapter.java:236)\r\n\tat com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter.handleEmbed(ExtentCucumberAdapter.java:222)\r\n\tat com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter.access$400(ExtentCucumberAdapter.java:62)\r\n\tat com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter$6.receive(ExtentCucumberAdapter.java:122)\r\n\tat com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter$6.receive(ExtentCucumberAdapter.java:119)\r\n\tat cucumber.runner.AbstractEventPublisher.send(AbstractEventPublisher.java:45)\r\n\tat cucumber.runner.AbstractEventBus.send(AbstractEventBus.java:9)\r\n\tat cucumber.runner.TimeServiceEventBus.send(TimeServiceEventBus.java:3)\r\n\tat cucumber.runner.ThreadLocalRunnerSupplier$SynchronizedEventBus.send(ThreadLocalRunnerSupplier.java:90)\r\n\tat cucumber.runner.ThreadLocalRunnerSupplier$LocalEventBus.send(ThreadLocalRunnerSupplier.java:63)\r\n\tat cucumber.runner.Scenario.embed(Scenario.java:58)\r\n\tat steps.Hooks.tearDown(Hooks.java:21)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\r\n\tat java.base/java.lang.reflect.Method.invoke(Unknown Source)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:26)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:20)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runner.HookDefinitionMatch.runStep(HookDefinitionMatch.java:16)\r\n\tat cucumber.runner.TestStep.executeStep(TestStep.java:63)\r\n\tat cucumber.runner.TestStep.run(TestStep.java:49)\r\n\tat cucumber.runner.TestCase.run(TestCase.java:48)\r\n\tat cucumber.runner.Runner.runPickle(Runner.java:40)\r\n\tat cucumber.runtime.junit.PickleRunners$NoStepDescriptions.run(PickleRunners.java:146)\r\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:68)\r\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:23)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:73)\r\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:124)\r\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:65)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat cucumber.api.junit.Cucumber$1.evaluate(Cucumber.java:133)\r\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:93)\r\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)\r\nCaused by: java.io.IOException: Failed to create directory C:\\Users\\Jaiver%20Mauricio%20M\\Documents\\SOFTESTING\\SeleniumAutomatizacion\\app\\test-output\r\n\tat cucumber.runtime.io.URLOutputStream.ensureParentDirExists(URLOutputStream.java:53)\r\n\tat cucumber.runtime.io.URLOutputStream.\u003cinit\u003e(URLOutputStream.java:33)\r\n\tat cucumber.runtime.io.URLOutputStream.\u003cinit\u003e(URLOutputStream.java:24)\r\n\tat com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter.createReportFileOutputStream(ExtentCucumberAdapter.java:246)\r\n\t... 51 more\r\n",
              "duration": 148468300,
              "status": "failed"
            },
            "match": {
              "location": "Hooks.tearDown(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 35615700,
              "status": "passed"
            },
            "line": 10,
            "name": "look for the neighborhood label",
            "match": {
              "location": "LabelsSteps.lookForTheNeighborhoodLabel()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 25508800,
              "status": "passed"
            },
            "line": 11,
            "name": "look for the message label",
            "match": {
              "location": "LabelsSteps.lookForTheMessageLabel()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "error_message": "org.junit.ComparisonFailure: expected:\u003c[Barrio:]\u003e but was:\u003c[Varrio]\u003e\r\n\tat org.junit.Assert.assertEquals(Assert.java:115)\r\n\tat org.junit.Assert.assertEquals(Assert.java:144)\r\n\tat steps.LabelsSteps.theLabelsAreWellWritten(LabelsSteps.java:29)\r\n\tat ✽.the labels are well written(src/test/resources/features/Form.feature:12)\r\n",
              "duration": 1207100,
              "status": "failed"
            },
            "line": 12,
            "name": "the labels are well written",
            "match": {
              "location": "LabelsSteps.theLabelsAreWellWritten()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 24,
        "name": "As a user, I enter all the data correctly and submit the form",
        "description": "",
        "id": "test-form-functionality;as-a-user--i-enter-all-the-data-correctly-and-submit-the-form;;2",
        "after": [
          {
            "output": [
              "Scenario fallido, ver imagen adjunta."
            ],
            "result": {
              "error_message": "org.openqa.selenium.UnhandledAlertException: unexpected alert open: {Alert text : UPPPPS ALGO HA FALLADO :(}\n  (Session info: chrome\u003d106.0.5249.103): UPPPPS ALGO HA FALLADO :(\nBuild info: version: \u00273.141.59\u0027, revision: \u0027e82be7d358\u0027, time: \u00272018-11-14T08:17:03\u0027\nSystem info: host: \u0027LAPTOP-10PQKDQR\u0027, ip: \u0027169.254.209.36\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002717.0.4.1\u0027\nDriver info: org.openqa.selenium.chrome.ChromeDriver\nCapabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 106.0.5249.103, chrome: {chromedriverVersion: 105.0.5195.52 (412c95e51883..., userDataDir: C:\\Users\\JAIVER~1\\AppData\\L...}, goog:chromeOptions: {debuggerAddress: localhost:62161}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}\nSession ID: d5c44a9dad854388c7c7be61a7b0e381\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:120)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:609)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.getScreenshotAs(RemoteWebDriver.java:295)\r\n\tat steps.Hooks.tearDown(Hooks.java:20)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\r\n\tat java.base/java.lang.reflect.Method.invoke(Unknown Source)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:26)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:20)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runner.HookDefinitionMatch.runStep(HookDefinitionMatch.java:16)\r\n\tat cucumber.runner.TestStep.executeStep(TestStep.java:63)\r\n\tat cucumber.runner.TestStep.run(TestStep.java:49)\r\n\tat cucumber.runner.TestCase.run(TestCase.java:48)\r\n\tat cucumber.runner.Runner.runPickle(Runner.java:40)\r\n\tat cucumber.runtime.junit.PickleRunners$NoStepDescriptions.run(PickleRunners.java:146)\r\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:68)\r\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:23)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:73)\r\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:124)\r\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:65)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat cucumber.api.junit.Cucumber$1.evaluate(Cucumber.java:133)\r\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:93)\r\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)\r\n",
              "duration": 29600200,
              "status": "failed"
            },
            "match": {
              "location": "Hooks.tearDown(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 183239000,
              "status": "passed"
            },
            "line": 15,
            "name": "I write correctly the data in the field of nombreDenilson",
            "match": {
              "arguments": [
                {
                  "val": "Denilson",
                  "offset": 49
                }
              ],
              "location": "CorrectFieldsSteps.iWriteCorrectlyName(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 154449200,
              "status": "passed"
            },
            "line": 16,
            "name": "I write correctly the data in the field of correodagudelo@gmail.com",
            "match": {
              "arguments": [
                {
                  "val": "dagudelo@gmail.com",
                  "offset": 49
                }
              ],
              "location": "CorrectFieldsSteps.iWriteCorrectlyEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 114213700,
              "status": "passed"
            },
            "line": 17,
            "name": "I write correctly the data in the field of barrioCalarca",
            "match": {
              "arguments": [
                {
                  "val": "Calarca",
                  "offset": 49
                }
              ],
              "location": "CorrectFieldsSteps.writeCorrectlyBarrio(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 125274500,
              "status": "passed"
            },
            "line": 18,
            "name": "I write correctly the data in the field of asuntoconsulta",
            "match": {
              "arguments": [
                {
                  "val": "consulta",
                  "offset": 49
                }
              ],
              "location": "CorrectFieldsSteps.iWriteCorrectlyAsunto(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 133072300,
              "status": "passed"
            },
            "line": 19,
            "name": "I write correctly the data in the field of mensajeconsultar puntaje",
            "match": {
              "arguments": [
                {
                  "val": "consultar puntaje",
                  "offset": 50
                }
              ],
              "location": "CorrectFieldsSteps.WriteCorrectlyMensaje(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 63968600,
              "status": "passed"
            },
            "line": 20,
            "name": "I send the information",
            "match": {
              "location": "CorrectFieldsSteps.iSendTheInformation()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: Values should be different. Actual: UPPPPS ALGO HA FALLADO :(\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.junit.Assert.failEquals(Assert.java:185)\r\n\tat org.junit.Assert.assertNotEquals(Assert.java:161)\r\n\tat org.junit.Assert.assertNotEquals(Assert.java:175)\r\n\tat steps.CorrectFieldsSteps.iShouldNotSeeAnErrorMessage(CorrectFieldsSteps.java:48)\r\n\tat ✽.I should not see an error message(src/test/resources/features/Form.feature:21)\r\n",
              "duration": 4602200,
              "status": "failed"
            },
            "line": 21,
            "name": "I should not see an error message",
            "match": {
              "location": "CorrectFieldsSteps.iShouldNotSeeAnErrorMessage()"
            },
            "keyword": "But "
          }
        ]
      },
      {
        "line": 27,
        "name": "As a user, I leave all the fields blank and submit the form",
        "description": "",
        "id": "test-form-functionality;as-a-user--i-leave-all-the-fields-blank-and-submit-the-form",
        "after": [
          {
            "result": {
              "duration": 524500,
              "status": "passed"
            },
            "match": {
              "location": "Hooks.tearDown(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 426285800,
              "status": "passed"
            },
            "line": 28,
            "name": "I send the form, without filling the text fields",
            "match": {
              "location": "CleanFieldsSteps.iSendTheFormWithoutFillingTheTextFields()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6868900,
              "status": "passed"
            },
            "line": 29,
            "name": "I should see an error message",
            "match": {
              "location": "CleanFieldsSteps.iShouldSeeAnErrorMessage()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 41,
        "name": "I, as a user, enter incorrect data in the text fields",
        "description": "",
        "id": "test-form-functionality;i--as-a-user--enter-incorrect-data-in-the-text-fields;;2",
        "after": [
          {
            "result": {
              "duration": 197000,
              "status": "passed"
            },
            "match": {
              "location": "Hooks.tearDown(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1108600800,
              "status": "passed"
            },
            "line": 32,
            "name": "I write incorrectly the data in the field of nombreD",
            "match": {
              "arguments": [
                {
                  "val": "D",
                  "offset": 51
                }
              ],
              "location": "IncorrectFieldsSteps.iWriteInCorrectlyName(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 119303000,
              "status": "passed"
            },
            "line": 33,
            "name": "I write incorrectly the data in the field of correod-m",
            "match": {
              "arguments": [
                {
                  "val": "d-m",
                  "offset": 51
                }
              ],
              "location": "IncorrectFieldsSteps.iWriteInCorrectlyEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 113494900,
              "status": "passed"
            },
            "line": 34,
            "name": "I write incorrectly the data in the field of barrioCa",
            "match": {
              "arguments": [
                {
                  "val": "Ca",
                  "offset": 51
                }
              ],
              "location": "IncorrectFieldsSteps.writeInCorrectlyBarrio(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 115405800,
              "status": "passed"
            },
            "line": 35,
            "name": "I write incorrectly the data in the field of asuntoco",
            "match": {
              "arguments": [
                {
                  "val": "co",
                  "offset": 51
                }
              ],
              "location": "IncorrectFieldsSteps.iWriteInCorrectlyAsunto(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 105453600,
              "status": "passed"
            },
            "line": 36,
            "name": "I write incorrectly the data in the field of mensajep",
            "match": {
              "arguments": [
                {
                  "val": "p",
                  "offset": 52
                }
              ],
              "location": "IncorrectFieldsSteps.WriteInCorrectlyMensaje(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 56643900,
              "status": "passed"
            },
            "line": 37,
            "name": "I send the incorrect information",
            "match": {
              "location": "IncorrectFieldsSteps.iSendTheInformation()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 9434100,
              "status": "passed"
            },
            "line": 38,
            "name": "I should see an error alert on",
            "match": {
              "location": "IncorrectFieldsSteps.iShouldNotSeeAnErrorMessage()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "line": 43,
        "name": "I, as a user, want to reload the page, entering option Caso 1, in the header",
        "description": "",
        "id": "test-form-functionality;i--as-a-user--want-to-reload-the-page--entering-option-caso-1--in-the-header",
        "after": [
          {
            "output": [
              "Scenario fallido, ver imagen adjunta."
            ],
            "embeddings": [
              {
                "data": "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ZAkPAQAAAIAs4SEAAAAAkCU8BAAAAACyhIcAAAAAQJbwEAAAAADIEh4CAAAAAFnCQwAAAAAgS3gIAAAAAGQJDwEAAACALOEhAAAAAJAlPAQAAAAAsoSHAAAAAECW8BAAAAAAyBIeAgAAAABZwkMAAAAAIEt4CAAAAABkCQ8BAAAAgCzhIQAAAACQJTwEAAAAALKEhwAAAABAlvAQAAAAAMgSHgIAAAAAWcJDAAAAACBLeAgAAAAAZAkPAQAAAIAs4SEAAAAAkCU8BAAAAACyhIcAAAAAQJbwEAAAAADIEh4CAAAAAFnCQwAAAAAgS3gIAAAAAGQJDwEAAACALOEhAAAAAJAlPAQAAAAAsoSHAAAAAECW8BAAAAAAyBIeAgAAAABZwkMAAAAAIEt4CAAAAABkCQ8BAAAAgCzhIQAAAACQJTwEAAAAALKEhwAAAABAlvAQAAAAAMgSHgIAAAAAWcJDAAAAACBLeAgAAAAAZAkPAQAAAIAs4SEAAAAAkCU8BAAAAACyhIcAAAAAQJbwEAAAAADIEh4CAAAAAFnCQwAAAAAgS3gIAAAAAGQJDwEAAACALOEhAAAAAJAlPAQAAAAAsoSHAAAAAECW8BAAAAAAyBIeAgAAAABZwkMAAAAAIEt4CAAAAABkCQ8BAAAAgCzhIQAAAACQJTwEAAAAALKEhwAAAABAlvAQAAAAAMgSHgIAAAAAWcJDAAAAACBLeAgAAAAAZAkPAQAAAIAs4SEAAAAAkCU8BAAAAACyhIcAAAAAQJbwEAAAAADIEh4CAAAAAFnCQwAAAAAgS3gIAAAAAGQJDwEAAACALOEhAAAAAJAlPAQAAAAAsoSHAAAAAECW8BAAAAAAyBIeAgAAAABZwkMAAAAAIEt4CAAAAABkCQ8BAAAAgCzhIQAAAACQJTwEAAAAALKEhwAAAABAlvAQAAAAAMgSHgIAAAAAWcJDAAAAACBLeAgAAAAAZAkPAQAAAIAs4SEAAAAAkCU8BAAAAACyhIcAAAAAQJbwEAAAAADIEh4CAAAAAFnCQwAAAAAgS3gIAAAAAGQJDwEAAACALOEhAAAAAJAlPAQAAAAAsoSHAAAAAECW8BAAAAAAyBIeAgAAAABZwkMAAAAAIEt4CAAAAABkCQ8BAAAAgCzhIQAAAACQJTwEAAAAALKEhwAAAABAlvAQAAAAAMgSHgIAAAAAWcJDAAAAACBLeAgAAAAAZAkPAQAAAIAs4SEAAAAAkCU8BAAAAACyhIcAAAAAQJbwEAAAAADIEh4CAAAAAFnCQwAAAAAgS3gIAAAAAGQJDwEAAACALOEhAAAAAJAlPAQAAAAAsoSHAAAAAECW8BAAAAAAyBIeAgAAAABZwkMAAAAAIEt4CAAAAABkCQ8BAAAAgCzhIQAAAACQJTwEAAAAALKEhwAAAABAlvAQAAAAAMgSHgIAAAAAWcJDAAAAACBLeAgAAAAAZAkPAQAAAIAs4SEAAAAAkCU8BAAAAACyhIcAAAAAQJbwEAAAAADIEh4CAAAAAFnCQwAAAAAgS3gIAAAAAGQJDwEAAACALOEhAAAA/387diAAAAAAIMjfeoERCiMAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAADTwZFAAAAqkSURBVAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFjyEAAAAABY8hAAAAAAWPIQAAAAAFgBQoWSpt7Krx0AAAAASUVORK5CYII\u003d",
                "mime_type": "image/png"
              }
            ],
            "result": {
              "error_message": "cucumber.runtime.CucumberException: java.io.IOException: Failed to create directory C:\\Users\\Jaiver%20Mauricio%20M\\Documents\\SOFTESTING\\SeleniumAutomatizacion\\app\\test-output\r\n\tat com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter.createReportFileOutputStream(ExtentCucumberAdapter.java:248)\r\n\tat com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter.writeBytesToURL(ExtentCucumberAdapter.java:236)\r\n\tat com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter.handleEmbed(ExtentCucumberAdapter.java:222)\r\n\tat com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter.access$400(ExtentCucumberAdapter.java:62)\r\n\tat com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter$6.receive(ExtentCucumberAdapter.java:122)\r\n\tat com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter$6.receive(ExtentCucumberAdapter.java:119)\r\n\tat cucumber.runner.AbstractEventPublisher.send(AbstractEventPublisher.java:45)\r\n\tat cucumber.runner.AbstractEventBus.send(AbstractEventBus.java:9)\r\n\tat cucumber.runner.TimeServiceEventBus.send(TimeServiceEventBus.java:3)\r\n\tat cucumber.runner.ThreadLocalRunnerSupplier$SynchronizedEventBus.send(ThreadLocalRunnerSupplier.java:90)\r\n\tat cucumber.runner.ThreadLocalRunnerSupplier$LocalEventBus.send(ThreadLocalRunnerSupplier.java:63)\r\n\tat cucumber.runner.Scenario.embed(Scenario.java:58)\r\n\tat steps.Hooks.tearDown(Hooks.java:21)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\r\n\tat java.base/java.lang.reflect.Method.invoke(Unknown Source)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:26)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:20)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runner.HookDefinitionMatch.runStep(HookDefinitionMatch.java:16)\r\n\tat cucumber.runner.TestStep.executeStep(TestStep.java:63)\r\n\tat cucumber.runner.TestStep.run(TestStep.java:49)\r\n\tat cucumber.runner.TestCase.run(TestCase.java:48)\r\n\tat cucumber.runner.Runner.runPickle(Runner.java:40)\r\n\tat cucumber.runtime.junit.PickleRunners$NoStepDescriptions.run(PickleRunners.java:146)\r\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:68)\r\n\tat cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:23)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:73)\r\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:124)\r\n\tat cucumber.api.junit.Cucumber.runChild(Cucumber.java:65)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat cucumber.api.junit.Cucumber$1.evaluate(Cucumber.java:133)\r\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:93)\r\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)\r\nCaused by: java.io.IOException: Failed to create directory C:\\Users\\Jaiver%20Mauricio%20M\\Documents\\SOFTESTING\\SeleniumAutomatizacion\\app\\test-output\r\n\tat cucumber.runtime.io.URLOutputStream.ensureParentDirExists(URLOutputStream.java:53)\r\n\tat cucumber.runtime.io.URLOutputStream.\u003cinit\u003e(URLOutputStream.java:33)\r\n\tat cucumber.runtime.io.URLOutputStream.\u003cinit\u003e(URLOutputStream.java:24)\r\n\tat com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter.createReportFileOutputStream(ExtentCucumberAdapter.java:246)\r\n\t... 51 more\r\n",
              "duration": 147737100,
              "status": "failed"
            },
            "match": {
              "location": "Hooks.tearDown(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 622735800,
              "status": "passed"
            },
            "line": 44,
            "name": "I enter in the option Caso1, in the header",
            "match": {
              "location": "ReloadFormSteps.iEnterInTheOptionCasoInTheHeader()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: Values should be different. Actual: Not Found\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\tat org.junit.Assert.failEquals(Assert.java:185)\r\n\tat org.junit.Assert.assertNotEquals(Assert.java:161)\r\n\tat org.junit.Assert.assertNotEquals(Assert.java:175)\r\n\tat steps.ReloadFormSteps.iShouldNotSeeAPageNotFoundError(ReloadFormSteps.java:22)\r\n\tat ✽.I should not see a page not found error(src/test/resources/features/Form.feature:45)\r\n",
              "duration": 39607500,
              "status": "failed"
            },
            "line": 45,
            "name": "I should not see a page not found error",
            "match": {
              "location": "ReloadFormSteps.iShouldNotSeeAPageNotFoundError()"
            },
            "keyword": "But "
          }
        ]
      }
    ],
    "name": "Test form functionality",
    "description": "various personal details are entered into the form and then submitted",
    "id": "test-form-functionality",
    "keyword": "Feature",
    "uri": "src/test/resources/features/Form.feature",
    "tags": []
  }
]